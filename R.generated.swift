//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `white`.
    static let white = Rswift.ColorResource(bundle: R.hostingBundle, name: "white")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "white", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.white, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 21 images.
  struct image {
    /// Image `add`.
    static let add = Rswift.ImageResource(bundle: R.hostingBundle, name: "add")
    /// Image `back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "back")
    /// Image `cancel`.
    static let cancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "cancel")
    /// Image `check`.
    static let check = Rswift.ImageResource(bundle: R.hostingBundle, name: "check")
    /// Image `empty_content`.
    static let empty_content = Rswift.ImageResource(bundle: R.hostingBundle, name: "empty_content")
    /// Image `error`.
    static let error = Rswift.ImageResource(bundle: R.hostingBundle, name: "error")
    /// Image `icon_cell_whats_new`.
    static let icon_cell_whats_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_cell_whats_new")
    /// Image `icon_navigation_back`.
    static let icon_navigation_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_navigation_back")
    /// Image `icon_navigation_close`.
    static let icon_navigation_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_navigation_close")
    /// Image `icon_navigation_forward`.
    static let icon_navigation_forward = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_navigation_forward")
    /// Image `icon_navigation_github`.
    static let icon_navigation_github = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_navigation_github")
    /// Image `icon_navigation_history`.
    static let icon_navigation_history = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_navigation_history")
    /// Image `icon_navigation_language`.
    static let icon_navigation_language = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_navigation_language")
    /// Image `icon_navigation_refresh`.
    static let icon_navigation_refresh = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_navigation_refresh")
    /// Image `icon_navigation_stop`.
    static let icon_navigation_stop = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_navigation_stop")
    /// Image `icon_navigation_theme`.
    static let icon_navigation_theme = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_navigation_theme")
    /// Image `icon_navigation_web`.
    static let icon_navigation_web = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_navigation_web")
    /// Image `selected`.
    static let selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "selected")
    /// Image `tabbar_home`.
    static let tabbar_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_home")
    /// Image `tabbar_profile`.
    static let tabbar_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_profile")
    /// Image `unselected`.
    static let unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "unselected")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add", bundle: ..., traitCollection: ...)`
    static func add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cancel", bundle: ..., traitCollection: ...)`
    static func cancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check", bundle: ..., traitCollection: ...)`
    static func check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "empty_content", bundle: ..., traitCollection: ...)`
    static func empty_content(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.empty_content, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "error", bundle: ..., traitCollection: ...)`
    static func error(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.error, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_cell_whats_new", bundle: ..., traitCollection: ...)`
    static func icon_cell_whats_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_cell_whats_new, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_navigation_back", bundle: ..., traitCollection: ...)`
    static func icon_navigation_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_navigation_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_navigation_close", bundle: ..., traitCollection: ...)`
    static func icon_navigation_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_navigation_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_navigation_forward", bundle: ..., traitCollection: ...)`
    static func icon_navigation_forward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_navigation_forward, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_navigation_github", bundle: ..., traitCollection: ...)`
    static func icon_navigation_github(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_navigation_github, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_navigation_history", bundle: ..., traitCollection: ...)`
    static func icon_navigation_history(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_navigation_history, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_navigation_language", bundle: ..., traitCollection: ...)`
    static func icon_navigation_language(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_navigation_language, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_navigation_refresh", bundle: ..., traitCollection: ...)`
    static func icon_navigation_refresh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_navigation_refresh, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_navigation_stop", bundle: ..., traitCollection: ...)`
    static func icon_navigation_stop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_navigation_stop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_navigation_theme", bundle: ..., traitCollection: ...)`
    static func icon_navigation_theme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_navigation_theme, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_navigation_web", bundle: ..., traitCollection: ...)`
    static func icon_navigation_web(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_navigation_web, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selected", bundle: ..., traitCollection: ...)`
    static func selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_home", bundle: ..., traitCollection: ...)`
    static func tabbar_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_profile", bundle: ..., traitCollection: ...)`
    static func tabbar_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unselected", bundle: ..., traitCollection: ...)`
    static func unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unselected, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.localization` struct is generated, and contains static references to 25 localization keys.
    struct localization {
      /// en translation: Back
      ///
      /// Locales: en
      static let commonBack = Rswift.StringResource(key: "Common.Back", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Back online
      ///
      /// Locales: en
      static let toastConnectionBackMessage = Rswift.StringResource(key: "Toast.ConnectionBack.Message", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en
      static let commonCancel = Rswift.StringResource(key: "Common.Cancel", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Close
      ///
      /// Locales: en
      static let commonClose = Rswift.StringResource(key: "Common.Close", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Delete
      ///
      /// Locales: en
      static let commonDelete = Rswift.StringResource(key: "Common.Delete", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: en
      static let commonDone = Rswift.StringResource(key: "Common.Done", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Edit
      ///
      /// Locales: en
      static let commonEdit = Rswift.StringResource(key: "Common.Edit", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Error
      ///
      /// Locales: en
      static let commonError = Rswift.StringResource(key: "Common.Error", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Home
      ///
      /// Locales: en
      static let tabBarHomeTitle = Rswift.StringResource(key: "TabBar.Home.Title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Next
      ///
      /// Locales: en
      static let commonNext = Rswift.StringResource(key: "Common.Next", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: No
      ///
      /// Locales: en
      static let commonNo = Rswift.StringResource(key: "Common.No", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: No Results
      ///
      /// Locales: en
      static let commonNoResults = Rswift.StringResource(key: "Common.NoResults", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: No connection
      ///
      /// Locales: en
      static let toastConnectionLostMessage = Rswift.StringResource(key: "Toast.ConnectionLost.Message", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: No data
      ///
      /// Locales: en
      static let commonNoContent = Rswift.StringResource(key: "Common.NoContent", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: OK
      ///
      /// Locales: en
      static let commonOK = Rswift.StringResource(key: "Common.OK", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Profile
      ///
      /// Locales: en
      static let tabBarProfileTitle = Rswift.StringResource(key: "TabBar.Profile.Title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Reset
      ///
      /// Locales: en
      static let commonReset = Rswift.StringResource(key: "Common.Reset", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Save
      ///
      /// Locales: en
      static let commonSave = Rswift.StringResource(key: "Common.Save", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Search
      ///
      /// Locales: en
      static let commonSearch = Rswift.StringResource(key: "Common.Search", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Skip
      ///
      /// Locales: en
      static let commonSkip = Rswift.StringResource(key: "Common.Skip", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Success
      ///
      /// Locales: en
      static let commonSuccess = Rswift.StringResource(key: "Common.Success", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Yes
      ///
      /// Locales: en
      static let commonYes = Rswift.StringResource(key: "Common.Yes", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: login
      ///
      /// Locales: en
      static let loginLoginButtonTitle = Rswift.StringResource(key: "Login.LoginButton.Title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: password
      ///
      /// Locales: en
      static let loginPassword = Rswift.StringResource(key: "Login.Password", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: username
      ///
      /// Locales: en
      static let loginUsername = Rswift.StringResource(key: "Login.Username", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)

      /// en translation: Back
      ///
      /// Locales: en
      static func commonBack(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.Back", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Common.Back"
        }

        return NSLocalizedString("Common.Back", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Back online
      ///
      /// Locales: en
      static func toastConnectionBackMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Toast.ConnectionBack.Message", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Toast.ConnectionBack.Message"
        }

        return NSLocalizedString("Toast.ConnectionBack.Message", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en
      static func commonCancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.Cancel", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Common.Cancel"
        }

        return NSLocalizedString("Common.Cancel", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Close
      ///
      /// Locales: en
      static func commonClose(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.Close", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Common.Close"
        }

        return NSLocalizedString("Common.Close", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Delete
      ///
      /// Locales: en
      static func commonDelete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.Delete", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Common.Delete"
        }

        return NSLocalizedString("Common.Delete", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: en
      static func commonDone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.Done", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Common.Done"
        }

        return NSLocalizedString("Common.Done", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Edit
      ///
      /// Locales: en
      static func commonEdit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.Edit", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Common.Edit"
        }

        return NSLocalizedString("Common.Edit", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Error
      ///
      /// Locales: en
      static func commonError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.Error", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Common.Error"
        }

        return NSLocalizedString("Common.Error", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Home
      ///
      /// Locales: en
      static func tabBarHomeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TabBar.Home.Title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "TabBar.Home.Title"
        }

        return NSLocalizedString("TabBar.Home.Title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Next
      ///
      /// Locales: en
      static func commonNext(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.Next", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Common.Next"
        }

        return NSLocalizedString("Common.Next", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: No
      ///
      /// Locales: en
      static func commonNo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.No", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Common.No"
        }

        return NSLocalizedString("Common.No", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: No Results
      ///
      /// Locales: en
      static func commonNoResults(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.NoResults", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Common.NoResults"
        }

        return NSLocalizedString("Common.NoResults", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: No connection
      ///
      /// Locales: en
      static func toastConnectionLostMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Toast.ConnectionLost.Message", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Toast.ConnectionLost.Message"
        }

        return NSLocalizedString("Toast.ConnectionLost.Message", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: No data
      ///
      /// Locales: en
      static func commonNoContent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.NoContent", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Common.NoContent"
        }

        return NSLocalizedString("Common.NoContent", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: OK
      ///
      /// Locales: en
      static func commonOK(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.OK", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Common.OK"
        }

        return NSLocalizedString("Common.OK", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Profile
      ///
      /// Locales: en
      static func tabBarProfileTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TabBar.Profile.Title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "TabBar.Profile.Title"
        }

        return NSLocalizedString("TabBar.Profile.Title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Reset
      ///
      /// Locales: en
      static func commonReset(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.Reset", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Common.Reset"
        }

        return NSLocalizedString("Common.Reset", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Save
      ///
      /// Locales: en
      static func commonSave(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.Save", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Common.Save"
        }

        return NSLocalizedString("Common.Save", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Search
      ///
      /// Locales: en
      static func commonSearch(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.Search", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Common.Search"
        }

        return NSLocalizedString("Common.Search", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Skip
      ///
      /// Locales: en
      static func commonSkip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.Skip", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Common.Skip"
        }

        return NSLocalizedString("Common.Skip", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Success
      ///
      /// Locales: en
      static func commonSuccess(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.Success", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Common.Success"
        }

        return NSLocalizedString("Common.Success", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Yes
      ///
      /// Locales: en
      static func commonYes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.Yes", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Common.Yes"
        }

        return NSLocalizedString("Common.Yes", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: login
      ///
      /// Locales: en
      static func loginLoginButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login.LoginButton.Title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Login.LoginButton.Title"
        }

        return NSLocalizedString("Login.LoginButton.Title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: password
      ///
      /// Locales: en
      static func loginPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login.Password", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Login.Password"
        }

        return NSLocalizedString("Login.Password", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: username
      ///
      /// Locales: en
      static func loginUsername(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login.Username", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "Login.Username"
        }

        return NSLocalizedString("Login.Username", tableName: "Localization", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ViewController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
